grad
fac_grad <- factor(grad, order = TRUE, levels = c("Doutorado", "Mestrado", "Bacharelado"))
fac_grad
levels(fac_grad)
knitr::opts_chunk$set(echo = TRUE)
vec1 <- c("Macho","Femea","Femea","Macho","Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
animais <- c("Zebra", "Pantera", "Rinoceronte", "Macaco", "Tigre")
animais
class(animais)
fac_animais <- factor(animais)
fac_animais
class(fac_animais)
levels(fac_animais)
grad <- c("Mestrado", "Doutorado", "Bacharelado", "Mestrado", "Mestrado")
grad
fac_grad <- factor(grad, order = TRUE, levels = c("Doutorado", "Mestrado", "Bacharelado"))
fac_grad
levels(fac_grad)
fac_grad
# Sumarizar os dados fornece uma visão geral sobre o conteúdo das variáveis
summary(fac_grad)
summary(grad)
# Sumarizar os dados fornece uma visão geral sobre o conteúdo das variáveis
summary(fac_grad)
summary(grad)
# Sumarizar os dados fornece uma visão geral sobre o conteúdo das variáveis
summary(fac_grad)
summary(grad)
vec2 <- c("M", "F", "F", "M", "M", "M", "F", "F", "M", "M", "M", "F", "F", "M", "M")
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac_vec2
summary(fac_vec2)
summary(vec2)
summary(fac_grad)
summary(grad)
vec2 <- c("M", "F", "F", "M", "M", "M", "F", "F", "M", "M", "M", "F", "F", "M", "M")
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac_vec2
summary(fac_vec2)
summary(vec2)
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata = factor(data)
fdata
rdata = factor(data, labels = c("I","II","III"))
rdata
set1 <- c("AA", "B", "BA", "CC", "CA", "AA", "BA", "CC", "CC")
set1
f.set1 <- factor(set1)
f.set1
class(f.set1)
is.ordered(f.set1)
o.set1 <- factor(set1,
levels = c("CA", "BA", "AA", "CC", "B"),
ordered = TRUE)
o.set1
is.ordered(o.set1)
as.numeric(o.set1)
table(o.set1)
o
o.set1
is.ordered(o.set1)
as.numeric(o.set1)
table(o.set1)
# Fatores e Dataframes
df <- read.csv2("bases/etnias.csv", sep = ',')
View(df)
str(df)
levels(df$Etnia)
df <- read.csv2("bases/etnias.csv", sep = ',')
View(df)
str(df)
levels(df$Etnia)
View(df)
summary(df$Etnia)
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
summary(df$Idade)
summary(lm(Idade~Etnia, data = df))
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
df
str(df)
#### Resolução de Exercícios
vec3 <- c(1:30)
vec30
#### Resolução de Exercícios
vec3 <- c(1:30)
vec30
#### Resolução de Exercícios
vec30 <- c(1:30)
vec3
#### Resolução de Exercícios
vec30 <- c(1:30)
vec30
knitr::opts_chunk$set(echo = TRUE)
mat <- matrix(c(27:31), nr=2)
mat <- matrix(c(27:30), nr=2)
mat
rbind(mat, vec30)
cbind(mat, vec30)
cbind(mat, matrix(vec30, nr=2))
lista1 <- list(cbind(mat, matrix(vec30, nr=2)))
lista1
#### 04
?read.table
dados1 <- read.table('http://data.princeton.edu/wws509/datasets/effort.dat')
head(dados1)
class(dados1)
colnames(dados1) <- c("config", "esfc", "chang")
dados1
#### 06
View(iris)
knitr::opts_chunk$set(echo = TRUE)
getwd()
vec1 <- c("Macho","Femea","Femea","Macho","Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
vec1 <- c("Macho","Femea","Femea","Macho","Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
animais <- c("Zebra", "Pantera", "Rinoceronte", "Macaco", "Tigre")
animais
class(animais)
fac_animais <- factor(animais)
fac_animais
class(fac_animais)
levels(fac_animais)
grad <- c("Mestrado", "Doutorado", "Bacharelado", "Mestrado", "Mestrado")
grad
fac_grad <- factor(grad, order = TRUE, levels = c("Doutorado", "Mestrado", "Bacharelado"))
fac_grad
levels(fac_grad)
summary(fac_grad)
summary(grad)
vec2 <- c("M", "F", "F", "M", "M", "M", "F", "F", "M", "M", "M", "F", "F", "M", "M")
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac_vec2
summary(fac_vec2)
summary(vec2)
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata = factor(data)
fdata
rdata = factor(data, labels = c("I","II","III"))
rdata
set1 <- c("AA", "B", "BA", "CC", "CA", "AA", "BA", "CC", "CC")
set1
f.set1 <- factor(set1)
f.set1
class(f.set1)
is.ordered(f.set1)
o.set1 <- factor(set1,
levels = c("CA", "BA", "AA", "CC", "B"),
ordered = TRUE)
o.set1
is.ordered(o.set1)
as.numeric(o.set1)
table(o.set1)
df <- read.csv2("bases/etnias.csv", sep = ',')
View(df)
str(df)
levels(df$Etnia)
summary(df$Etnia)
summary(df$Idade)
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
summary(df$Idade)
summary(df$Etnia)
levels(df$Etnia)
levels(df$Etnia)
levels(df$Etnia)
str(df)
df <- read.csv2("bases/etnias.csv", sep = ',')
levels(df$Etnia)
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
summary(lm(Idade~Etnia, data = df))
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
df
str(df)
# Criando vetores
vec1 <- c(1001, 1002, 1003, 1004, 1005)
vec2 <- c(0, 1, 1, 0, 2)
vec3 <- c('Verde','Laranja','Azul','Laranja','Verde')
# Unindo os vetores em um dataframe
df <- data.frame(vec1, vec2, vec3)
df
# Verificando que o R categorizou a última coluna como fator
str(df)
# Verificando os níveis do fator. Perceba que os níveis estão categorizados em ordem alfabética
levels(df$vec3)
# Verificando os níveis do fator. Perceba que os níveis estão categorizados em ordem alfabética
levels(df$vec3)
# Criando uma outra coluna e atribuindo labels
df$cat1 <- factor(df$vec3, labels = c("cor2", "cor1", "cor3"))
df
# Internamente, os fatores são registrados como inteiros, mas a ordenação segue a ordem alfabética
# das strings
str(df)
df
# Criando uma outra coluna e atribuindo labels
# Ao aplicarmos a função factor() a coluna vec2, internamente o R classificou em ordem alfabética
# e quando atribuímos os labels, foi feita a associação.
df$cat2 <- factor(df$vec2, labels = c("Divorciado", "Casado", "Solteiro"))
df
str(df)
levels(df$cat2)
vec1 <- c("Macho","Femea","Femea","Macho","Macho")
vec1
fac_vec1 <- factor(vec1)
fac_vec1
class(vec1)
class(fac_vec1)
# Variáveis categóricas nominais
# Não existe uma ordem implícita
animais <- c("Zebra", "Pantera", "Rinoceronte", "Macaco", "Tigre")
animais
class(animais)
fac_animais <- factor(animais)
fac_animais
class(fac_animais)
levels(fac_animais)
# Variáveis categóricas ordinais
# Possuem uma ordem natural
grad <- c("Mestrado", "Doutorado", "Bacharelado", "Mestrado", "Mestrado")
grad
fac_grad <- factor(grad, order = TRUE, levels = c("Doutorado", "Mestrado", "Bacharelado"))
fac_grad
levels(fac_grad)
# Sumarizar os dados fornece uma visão geral sobre o conteúdo das variáveis
summary(fac_grad)
summary(grad)
vec2 <- c("M", "F", "F", "M", "M", "M", "F", "F", "M", "M", "M", "F", "F", "M", "M")
vec2
fac_vec2 <- factor(vec2)
fac_vec2
levels(fac_vec2) <- c("Femea", "Macho")
fac_vec2
summary(fac_vec2)
summary(vec2)
# Mais exemplos
data = c(1,2,2,3,1,2,3,3,1,2,3,3,1)
fdata = factor(data)
fdata
rdata = factor(data, labels = c("I","II","III"))
rdata
# Fatores Não-Ordenados
set1 <- c("AA", "B", "BA", "CC", "CA", "AA", "BA", "CC", "CC")
set1
# Transformando os dados.
# R apenas criou os níveis, o que não significa que exista uma hierarquia.
f.set1 <- factor(set1)
f.set1
class(f.set1)
is.ordered(f.set1)
# Fatores Ordenados
o.set1 <- factor(set1,
levels = c("CA", "BA", "AA", "CC", "B"),
ordered = TRUE)
o.set1
is.ordered(o.set1)
as.numeric(o.set1)
table(o.set1)
# Fatores e Dataframes
df <- read.csv2("etnias.csv", sep = ',')
# Fatores e Dataframes
df <- read.csv2("bases/etnias.csv", sep = ',')
View(df)
# Variáveis do tipo fator
str(df)
# Níveis dos fatores
# Internamente, o R armazena valores inteiros e faz um mapeamento para as strings (em ordem alfabética)
# e agrupa as estatísticas por níveis. Agora, se fizermos sumarização de estatísticas, é possível visualizar
# a contabilização para cada categoria
levels(df$Etnia)
summary(df$Etnia)
# Plot
# Agora se fizermos um plot, temos um boxplot para estas variáveis categóricas
plot(df$Idade~df$Etnia, xlab = 'Etnia', ylab = 'Idade', main = 'Idade por Etnia')
# Regressão
summary(lm(Idade~Etnia, data = df))
# Convertendo uma coluna em variável categórica. Isso criará um fator não-ordenado
df
str(df)
df$Estado_Civil.cat <- factor(df$Estado_Civil, labels = c("Solteiro", "Casado", "Divorciado"))
df
str(df)
# Funções Built-in
abs(-43)
sum(c(1:5))
mean(c(1:5))
round(c(1.1:5.8))
rev(c(1:5))
seq(1:5)
sort(rev(c(1:5)))
append(c(1:5), 6)
vec1 <- c(1.5, 2.5, 8.4, 3.7, 6.3)
vec2 <- rev(vec1)
vec2
# Funções dentro de funções
plot(rnorm(10))
mean(c(abs(vec1), abs(vec2)))
# Criando funções
myfunc <- function(x) { x + x }
myfunc(10)
class(myfunc)
myfunc2 <- function(a, b) {
valor = a ^ b
print(valor)
}
myfunc2(3, 2)
jogando_dados <- function() {
num <- sample(1:6, size = 1) #Local
num
}
jogando_dados()
# Escopo
print(num)
# Escopo
# print(num)
# Error in print(num) : objeto 'num' não encontrado
num <- c(1:6)
num #Global
# Funções sem número definido de argumentos
vec1 <- (10:13)
vec2 <- c("a", "b", "c", "d")
vec3 <- c(6.5, 9.2, 11.9, 5.1)
myfunc3 <- function(...){
df = data.frame(cbind(...))
print(df)
}
myfunc3(vec1)
myfunc3(vec2, vec3)
myfunc3(vec1, vec2, vec3)
x <- 1:10000000
# Função que calcula a raiz quadrada de cada elemento de um vetor de números
meu_sqrt <- function(numeros) {
resp <- numeric(length(numeros))
for(i in seq_along(numeros)) {
resp[i] <- sqrt(numeros[i])
}
return(resp)
}
system.time(x2a <- meu_sqrt(x))
system.time(x2b <- sqrt(x))
# Sua máquina pode apresentar resultado diferente por conta da precisão de cálculo do processador.
identical(x2a, x2b)
list.files(".")
numeros <- c(1:4)
carac <- c('a','b','c','d')
boo <- c(1,0,1,1)
df <- data.frame(numeros, carac, boo)
View(df)
for (i in vec1) {print(i)}
# Criando um Vetor
vec1 <- c(12, 3, 4, 19, 34)
for (i in vec1) {print(i)}
for (i in vec1) { if(i>10) print(i)}
for (i in vec1) { if(i>10) print(i+'eh maior que 10')}
for (i in vec1) { if(i>10) print(paste(i,' eh maior que 10', collapse = " "))}
for (i in vec1) { if(i>10) sprintf('%d eh maior que 10', i)}
for (i in vec1) { if(i>10) printf('%d eh maior que 10', i)}
for (i in vec1) { if(i>10) print('%d eh maior que 10', i)}
for (i in lst2) { if(i>10) print(i)}
# Exercício 4 - Conisdere a lista abaixo. Crie um loop que imprima no console cada elemento da lista
lst2 <- list(2, 3, 5, 7, 11, 13)
for (i in lst2) { if(i>10) print(i)}
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
rowSums(mat1)
colSums(mat1)
for (i in mat1){
if(i > 15){
print(i)
}
}
setwd("C:\r\estudor")
setwd("C:\\r\\estudor")
list.files()
install.packages("readr")
install.packages("data.table")
install.packages("dplyr")
install.packages("ggplot2")
library(readr)
library(dplyr)
library(ggplot2)
library(scales)
library(data.table)
# Usando read.csv2()
system.time(df_teste1 <- read.csv2("TemperaturasGlobais/TemperaturasGlobais.csv"))
# Usando read.csv2()
system.time(df_teste1 <- read.csv2("TemperaturasGlobais.csv"))
# Usando read.table()
system.time(df_teste2 <- read.table("TemperaturasGlobais.csv"))
# Usando fread()
# ?fread
system.time(df <- fread("TemperaturasGlobais.csv"))
head(df)
class(df)
# Criando subsets dos dados carregados
cidadesBrasil <- subset(df, Country == 'Brazil')
?na.omit
?na
DT = data.table(x=c(1,NaN,NA,3), y=c(NA_integer_, 1:3), z=c("a", NA_character_, "b", "c"))
DT
# default behaviour
na.omit(DT)
DT
# Criando subsets dos dados carregados
cidadesBrasil <- subset(df, Country == 'Brazil')
head(df)
head(cidadesBrasil)
View(cidadesBrasil)
View(cidadesBrasil)
cidadesBrasil <- na.omit(cidadesBrasil)
nrow(df)
nrow(cidadesBrasil)
dim(cidadesBrasil)
View(cidadesBrasil)
unique(cidadesBrasil[["City"]])
unique(cidadesBrasil["City"])
]
unique(cidadesBrasil[["City"]])
Encoding(mydataframe[[col]]) <- "UTF-8"}
for (col in colnames(cidadesBrasil)){
Encoding(mydataframe[[col]]) <- "UTF-8"
}
for (col in colnames(cidadesBrasil)){
Encoding(cidadesBrasil[[col]]) <- "UTF-8"
}
for (col in colnames(cidadesBrasil)){
Encoding(cidadesBrasil[[col]]) <- "UTF-8"
}
unique(cidadesBrasil[["City"]])
# Usando fread()
# ?fread
system.time(df <- fread("TemperaturasGlobais.csv", , encoding = 'UTF-8'))
# Criando subsets dos dados carregados
cidadesBrasil <- subset(df, Country == 'Brazil')
cidadesBrasil <- na.omit(cidadesBrasil)
(cidadesBrasil[["City"]])
unique(cidadesBrasil[["City"]])
nrow(df)
nrow(cidadesBrasil)
dim(cidadesBrasil)
# Convertendo as Datas
cidadesBrasil$dt <- as.POSIXct(cidadesBrasil$dt,format='%Y-%m-%d')
head(df)
head(cidadesBrasil)
# Palmas
plm <- subset(cidadesBrasil, City == 'Palmas')
plm <- subset(plm, Year %in% c(1796,1846,1896,1946,1996,2012))
cidadesBrasil$Month <- month(cidadesBrasil$dt)
cidadesBrasil$Year <- year(cidadesBrasil$dt)
head(cidadesBrasil)
# Palmas
plm <- subset(cidadesBrasil, City == 'Palmas')
plm <- subset(plm, Year %in% c(1796,1846,1896,1946,1996,2012))
# Curitiba
crt <- subset(cidadesBrasil, City == 'Curitiba')
crt <- subset(crt, Year %in% c(1796,1846,1896,1946,1996,2012))
# Recife
recf <- subset(cidadesBrasil, City=='Recife')
recf <- subset(recf,Year %in% c(1796,1846,1896,1946,1996,2012))
# Construindo os Plots
p_plm <- ggplot(plm, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Palmas") +
theme(plot.title = element_text(size = 18))
p_crt <- ggplot(crt, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Curitiba") +
theme(plot.title = element_text(size = 18))
p_recf <- ggplot(recf, aes(x = (Month), y = AverageTemperature, color = as.factor(Year))) +
geom_smooth(se = FALSE,fill = NA, size = 2) +
theme_light(base_size = 20) +
xlab("Mês")+
ylab("Temperatura Média") +
scale_color_discrete("") +
ggtitle("Temperatura Média ao longo dos anos em Recife") +
theme(plot.title = element_text(size = 18))
# Plotando
p_plm
