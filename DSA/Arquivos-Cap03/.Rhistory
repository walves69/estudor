# Instala e carrega o pacote
install.packages('lattice')
library(lattice)
# ScatterPlot com Lattice
View(iris)
xyplot(data = iris, groups = Species, Sepal.Length ~ Petal.Length)
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2),
scales = list(x = "free"))
# Contagem de elementos
PetalLength <- equal.count(iris$Petal.Length, 4)
PetalLength
# ScatterPlots
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(...) {
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.xyplot(...)})
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(x,y,...) {
panel.xyplot(x,y,...)
mylm <- lm(y~x)
panel.abline(mylm)})
histogram(~Sepal.Length | Species, xlab = "",
data = iris, layout=c(3,1), type = "density",
main = "Histograma Lattice", sub = "Iris Dataset, Sepal Length")
# Distribuição dos dados
qqmath(~ Sepal.Length | Species, data = iris, distribution = qunif)
# Boxplot
bwplot(Species~Sepal.Length, data = iris)
# ViolinPlot
bwplot(Species~Sepal.Length, data = iris,
panel = panel.violin)
# Instala os pacotes
install.packages(c("ggplot2", "maps", "mapdata"))
# Carrega os pacotes
library(ggplot2)
library(maps)
library(mapdata)
mapa <- map_data("world")
# Visualizando o dataframe
dim(mapa)
View(mapa)
# Gerando o Mapa
ggplot() + geom_polygon(data = mapa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = NA, color = "blue") +
coord_fixed(1.3)
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = "seagreen1", color = "blue") +
coord_fixed(1.3)
gg1
# Marcando alguns pontos no mapa
# Podemos usar um shapefile
labs <- data.frame(
long = c(69.24140, -2.8456051),
lat = c(-78.38995, 22.44512),
names = c("Ponto1", "Ponto2"),
stringsAsFactors = FALSE
)
# Pontos no mapa
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 2)
# Divisão por países
ggplot(data = mapa) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
install.packages("googleVis")
library(googleVis)
library(googleVis)
# Criando um Datafrane
df = data.frame(País = c("BR", "CH", "AR"),
Exportações = c(10,13,14),
Importações = c(23,12,32))
# Gráfico de Linha
Line <- gvisLineChart(df)
plot(Line)
# Gráfico de Barras
Column <- gvisColumnChart(df)
plot(Column)
# Gráfico de Barras Horizontais
Bar <- gvisBarChart(df)
plot(Bar)
# Gráfico de Pizza
Pie <- gvisPieChart(CityPopularity)
plot(Pie)
# Gráficos Combinados
Combo <- gvisComboChart(df, xvar = "País",
yvar = c("Exportações", "Importações"),
options = list(seriesType = "bars",
series='{1: {type:"line"}}'))
plot(Combo)
# Scatter Chart
Scatter <- gvisScatterChart(women,
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="Women", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
plot(Scatter)
# Bubble
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Bubble)
# Customizando
M <- matrix(nrow=6,ncol=6)
M[col(M)==row(M)] <- 1:6
dat <- data.frame(X=1:6, M)
SC <- gvisScatterChart(dat,
options=list(
title="Customizing points",
legend="right",
pointSize=30,
series="{
0: { pointShape: 'circle' },
1: { pointShape: 'triangle' },
2: { pointShape: 'square' },
3: { pointShape: 'diamond' },
4: { pointShape: 'star' },
5: { pointShape: 'polygon' }
}"))
plot(SC)
# Gauge
Gauge <- gvisGauge(CityPopularity,
options=list(min=0, max=800, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
# Mapas
Intensity <- gvisIntensityMap(df)
plot(Intensity)
# Mapas
Intensity <- gvisIntensityMap(df)
# Mapas
Intensity <- gvisIntensityMap(df)
# Geo Chart
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
# Google Maps
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(AndrewMap)
# Dados em Gráfico. Nível de analfabetismo nos EUA
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
View(GeoStates)
